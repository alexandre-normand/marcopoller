// Code generated by mockery v1.0.0. DO NOT EDIT.

package marcopoller_test

import mock "github.com/stretchr/testify/mock"

import slack "github.com/nlopes/slack"

// Messenger is an autogenerated mock type for the Messenger type
type Messenger struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: channel, messageTimestamp
func (_m *Messenger) DeleteMessage(channel string, messageTimestamp string) (string, string, error) {
	ret := _m.Called(channel, messageTimestamp)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(channel, messageTimestamp)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(channel, messageTimestamp)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(channel, messageTimestamp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostEphemeral provides a mock function with given fields: channelID, userID, options
func (_m *Messenger) PostEphemeral(channelID string, userID string, options ...slack.MsgOption) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, userID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...slack.MsgOption) error); ok {
		r1 = rf(channelID, userID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMessage provides a mock function with given fields: channelID, options
func (_m *Messenger) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = rf(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMessage provides a mock function with given fields: channelID, timestamp, options
func (_m *Messenger) UpdateMessage(channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, timestamp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, timestamp, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, timestamp, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string, ...slack.MsgOption) string); ok {
		r2 = rf(channelID, timestamp, options...)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, ...slack.MsgOption) error); ok {
		r3 = rf(channelID, timestamp, options...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
